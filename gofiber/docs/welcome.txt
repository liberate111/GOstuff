https://docs.gofiber.io/

Fiber is an Express inspired web framework built on top of Fasthttp, the fastest HTTP engine for Go. Designed to ease things up for fast development with zero memory allocation and performance in mind.

# installaion

go get github.com/gofiber/fiber/v2


# Zero Allocation

Some values returned from *fiber.Ctx are not immutable by default

func handler(c *fiber.Ctx) error {
    // Variable is only valid within this handler
    result := c.Params("foo") 

    // ...
}

func handler(c *fiber.Ctx) error {
    // Variable is only valid within this handler
    result := c.Params("foo")

    // Make a copy
    buffer := make([]byte, len(result))
    copy(buffer, result)
    resultCopy := string(buffer) 
    // Variable is now valid forever

    // ...
}

app.Get("/:foo", func(c *fiber.Ctx) error {
    // Variable is now immutable
    result := utils.ImmutableString(c.Params("foo")) 

    // ...
})

Alternatively, you can also use the Immutable setting. It will make all values returned from the context immutable, allowing you to persist them anywhere. Of course, this comes at the cost of performance.


# Hello, World!

package main

import "github.com/gofiber/fiber/v2"

func main() {
  app := fiber.New()

  app.Get("/", func(c *fiber.Ctx) error {
    return c.SendString("Hello, World!")
  })

  app.Listen(":3000")
}


# Basic routing

! Each route can have multiple handler functions, that is executed when the route is matched.

// Function signature
app.Method(path string, ...func(*fiber.Ctx) error)

app is an instance of Fiber.
Method is an HTTP request method, in capitalization: Get, Put, Post, etc.
path is a virtual path on the server.
func(*fiber.Ctx) error is a callback function containing the Context executed when the route is matched.

# Static files

To serve static files such as images, CSS, and JavaScript files, replace your function handler with a file or directory string.
Function signature:

app.Static(prefix, root string)